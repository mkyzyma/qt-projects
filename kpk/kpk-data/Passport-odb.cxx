// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Passport-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>

namespace odb
{
  // Passport
  //

  bool access::composite_value_traits< ::kpk::data::Passport, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // _series
    //
    if (t[0UL])
    {
      i._series_value.capacity (i._series_size);
      grew = true;
    }

    // _number
    //
    if (t[1UL])
    {
      i._number_value.capacity (i._number_size);
      grew = true;
    }

    // _date
    //
    t[2UL] = 0;

    // _org
    //
    if (t[3UL])
    {
      i._org_value.capacity (i._org_size);
      grew = true;
    }

    // _orgCode
    //
    if (t[4UL])
    {
      i._orgCode_value.capacity (i._orgCode_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::kpk::data::Passport, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // _series
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._series_value.data ();
    b[n].capacity = i._series_value.capacity ();
    b[n].size = &i._series_size;
    b[n].is_null = &i._series_null;
    n++;

    // _number
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._number_value.data ();
    b[n].capacity = i._number_value.capacity ();
    b[n].size = &i._number_size;
    b[n].is_null = &i._number_null;
    n++;

    // _date
    //
    b[n].type = pgsql::bind::date;
    b[n].buffer = &i._date_value;
    b[n].is_null = &i._date_null;
    n++;

    // _org
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._org_value.data ();
    b[n].capacity = i._org_value.capacity ();
    b[n].size = &i._org_size;
    b[n].is_null = &i._org_null;
    n++;

    // _orgCode
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._orgCode_value.data ();
    b[n].capacity = i._orgCode_value.capacity ();
    b[n].size = &i._orgCode_size;
    b[n].is_null = &i._orgCode_null;
    n++;
  }

  bool access::composite_value_traits< ::kpk::data::Passport, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // _series
    //
    {
      ::QString const& v =
        o._series;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._series_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._series_value,
        size,
        is_null,
        v);
      i._series_null = is_null;
      i._series_size = size;
      grew = grew || (cap != i._series_value.capacity ());
    }

    // _number
    //
    {
      ::QString const& v =
        o._number;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._number_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._number_value,
        size,
        is_null,
        v);
      i._number_null = is_null;
      i._number_size = size;
      grew = grew || (cap != i._number_value.capacity ());
    }

    // _date
    //
    {
      ::QDate const& v =
        o._date;

      bool is_null (true);
      pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::set_image (
        i._date_value, is_null, v);
      i._date_null = is_null;
    }

    // _org
    //
    {
      ::QString const& v =
        o._org;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._org_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._org_value,
        size,
        is_null,
        v);
      i._org_null = is_null;
      i._org_size = size;
      grew = grew || (cap != i._org_value.capacity ());
    }

    // _orgCode
    //
    {
      ::QString const& v =
        o._orgCode;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._orgCode_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._orgCode_value,
        size,
        is_null,
        v);
      i._orgCode_null = is_null;
      i._orgCode_size = size;
      grew = grew || (cap != i._orgCode_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::kpk::data::Passport, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // _series
    //
    {
      ::QString& v =
        o._series;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._series_value,
        i._series_size,
        i._series_null);
    }

    // _number
    //
    {
      ::QString& v =
        o._number;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._number_value,
        i._number_size,
        i._number_null);
    }

    // _date
    //
    {
      ::QDate& v =
        o._date;

      pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::set_value (
        v,
        i._date_value,
        i._date_null);
    }

    // _org
    //
    {
      ::QString& v =
        o._org;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._org_value,
        i._org_size,
        i._org_null);
    }

    // _orgCode
    //
    {
      ::QString& v =
        o._orgCode;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._orgCode_value,
        i._orgCode_size,
        i._orgCode_null);
    }
  }
}

#include <odb/post.hxx>
