// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef LOAN_ODB_HXX
#define LOAN_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
#include "traits-pgsql.h"
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Loan.h"

#include "DbObject-odb.hxx"
#include "IsDeleted-odb.hxx"
#include "LoanType-odb.hxx"
#include "Member-odb.hxx"
#include "MemberInfo-odb.hxx"
#include "Name-odb.hxx"
#include "Passport-odb.hxx"
#include "Person-odb.hxx"
#include "User-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Loan
  //
  template <>
  struct class_traits< ::kpk::data::Loan >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::kpk::data::Loan >
  {
    public:
    typedef ::kpk::data::Loan object_type;
    typedef ::std::shared_ptr< ::kpk::data::Loan > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::ulong id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Loan
  //
  template <typename A>
  struct pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >:
    pointer_query_columns< ::kpk::data::DbObject, id_pgsql, A >,
    pointer_query_columns< ::kpk::data::MemberInfo, id_pgsql, A >
  {
    // DbObject
    //
    typedef pointer_query_columns< ::kpk::data::DbObject, id_pgsql, A > DbObject;

    // MemberInfo
    //
    typedef pointer_query_columns< ::kpk::data::MemberInfo, id_pgsql, A > MemberInfo;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // openDate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDate,
        pgsql::id_date >::query_type,
      pgsql::id_date >
    openDate_type_;

    static const openDate_type_ openDate;

    // closeDate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDate,
        pgsql::id_date >::query_type,
      pgsql::id_date >
    closeDate_type_;

    static const closeDate_type_ closeDate;

    // status
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::kpk::data::LoanStatus,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    status_type_;

    static const status_type_ status;

    // rate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    rate_type_;

    static const rate_type_ rate;

    // limit
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    limit_type_;

    static const limit_type_ limit;

    // length
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    length_type_;

    static const length_type_ length;

    // sum
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    sum_type_;

    static const sum_type_ sum;

    // remains
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    remains_type_;

    static const remains_type_ remains;

    // prc
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    prc_type_;

    static const prc_type_ prc;

    // loanType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    loanType_type_;

    static const loanType_type_ loanType;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    state_type_;

    static const state_type_ state;
  };

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::id_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::openDate_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  openDate (A::table_name, "\"openDate\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::closeDate_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  closeDate (A::table_name, "\"closeDate\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::status_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::rate_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  rate (A::table_name, "\"rate\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::limit_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  limit (A::table_name, "\"limit\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::length_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::sum_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  sum (A::table_name, "\"sum\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::remains_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  remains (A::table_name, "\"remains\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::prc_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  prc (A::table_name, "\"prc\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::loanType_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  loanType (A::table_name, "\"idLoanType\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::state_type_
  pointer_query_columns< ::kpk::data::Loan, id_pgsql, A >::
  state (A::table_name, "\"idState\"", 0);

  template <>
  class access::object_traits_impl< ::kpk::data::Loan, id_pgsql >:
    public access::object_traits< ::kpk::data::Loan >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type: object_traits_impl< ::kpk::data::DbObject, id_pgsql >::image_type,
      object_traits_impl< ::kpk::data::MemberInfo, id_pgsql >::image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _openDate
      //
      int _openDate_value;
      bool _openDate_null;

      // _closeDate
      //
      int _closeDate_value;
      bool _closeDate_null;

      // _status
      //
      int _status_value;
      bool _status_null;

      // _rate
      //
      long long _rate_value;
      bool _rate_null;

      // _limit
      //
      long long _limit_value;
      bool _limit_null;

      // _length
      //
      int _length_value;
      bool _length_null;

      // _sum
      //
      long long _sum_value;
      bool _sum_null;

      // _remains
      //
      long long _remains_value;
      bool _remains_null;

      // _prc
      //
      long long _prc_value;
      bool _prc_null;

      // _loanType
      //
      long long _loanType_value;
      bool _loanType_null;

      // _state
      //
      long long _state_value;
      bool _state_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct loanType_tag;
    struct state_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 19UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::kpk::data::Loan, id_common >:
    public access::object_traits_impl< ::kpk::data::Loan, id_pgsql >
  {
  };

  // Loan
  //
  template <>
  struct alias_traits<
    ::kpk::data::LoanType,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::Loan, id_pgsql >::loanType_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::kpk::data::LoanState,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::Loan, id_pgsql >::state_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::kpk::data::Loan, id_pgsql >
  {
    // loanType
    //
    typedef
    odb::alias_traits<
      ::kpk::data::LoanType,
      id_pgsql,
      access::object_traits_impl< ::kpk::data::Loan, id_pgsql >::loanType_tag>
    loanType_alias_;

    // state
    //
    typedef
    odb::alias_traits<
      ::kpk::data::LoanState,
      id_pgsql,
      access::object_traits_impl< ::kpk::data::Loan, id_pgsql >::state_tag>
    state_alias_;
  };

  template <typename A>
  struct query_columns< ::kpk::data::Loan, id_pgsql, A >:
    query_columns_base< ::kpk::data::Loan, id_pgsql >,
    query_columns< ::kpk::data::DbObject, id_pgsql, A >,
    query_columns< ::kpk::data::MemberInfo, id_pgsql, A >
  {
    // DbObject
    //
    typedef query_columns< ::kpk::data::DbObject, id_pgsql, A > DbObject;

    // MemberInfo
    //
    typedef query_columns< ::kpk::data::MemberInfo, id_pgsql, A > MemberInfo;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // openDate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDate,
        pgsql::id_date >::query_type,
      pgsql::id_date >
    openDate_type_;

    static const openDate_type_ openDate;

    // closeDate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDate,
        pgsql::id_date >::query_type,
      pgsql::id_date >
    closeDate_type_;

    static const closeDate_type_ closeDate;

    // status
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::kpk::data::LoanStatus,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    status_type_;

    static const status_type_ status;

    // rate
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    rate_type_;

    static const rate_type_ rate;

    // limit
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    limit_type_;

    static const limit_type_ limit;

    // length
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    length_type_;

    static const length_type_ length;

    // sum
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    sum_type_;

    static const sum_type_ sum;

    // remains
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    remains_type_;

    static const remains_type_ remains;

    // prc
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::Number,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    prc_type_;

    static const prc_type_ prc;

    // loanType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    loanType_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::kpk::data::LoanType,
        id_pgsql,
        loanType_alias_ > >
    loanType_pointer_type_;

    struct loanType_type_: loanType_pointer_type_, loanType_column_type_
    {
      loanType_type_ (const char* t, const char* c, const char* conv)
        : loanType_column_type_ (t, c, conv)
      {
      }
    };

    static const loanType_type_ loanType;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    state_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::kpk::data::LoanState,
        id_pgsql,
        state_alias_ > >
    state_pointer_type_;

    struct state_type_: state_pointer_type_, state_column_type_
    {
      state_type_ (const char* t, const char* c, const char* conv)
        : state_column_type_ (t, c, conv)
      {
      }
    };

    static const state_type_ state;
  };

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::id_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::openDate_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  openDate (A::table_name, "\"openDate\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::closeDate_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  closeDate (A::table_name, "\"closeDate\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::status_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::rate_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  rate (A::table_name, "\"rate\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::limit_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  limit (A::table_name, "\"limit\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::length_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::sum_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  sum (A::table_name, "\"sum\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::remains_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  remains (A::table_name, "\"remains\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::prc_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  prc (A::table_name, "\"prc\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::loanType_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  loanType (A::table_name, "\"idLoanType\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::Loan, id_pgsql, A >::state_type_
  query_columns< ::kpk::data::Loan, id_pgsql, A >::
  state (A::table_name, "\"idState\"", 0);
}

#include "Loan-odb.ixx"

#include <odb/post.hxx>

#endif // LOAN_ODB_HXX
