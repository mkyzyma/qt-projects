// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Name-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>

namespace odb
{
  // Name
  //

  bool access::composite_value_traits< ::kpk::data::Name, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // _first
    //
    if (t[0UL])
    {
      i._first_value.capacity (i._first_size);
      grew = true;
    }

    // _middle
    //
    if (t[1UL])
    {
      i._middle_value.capacity (i._middle_size);
      grew = true;
    }

    // _last
    //
    if (t[2UL])
    {
      i._last_value.capacity (i._last_size);
      grew = true;
    }

    // _full
    //
    if (t[3UL])
    {
      i._full_value.capacity (i._full_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::kpk::data::Name, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // _first
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._first_value.data ();
    b[n].capacity = i._first_value.capacity ();
    b[n].size = &i._first_size;
    b[n].is_null = &i._first_null;
    n++;

    // _middle
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._middle_value.data ();
    b[n].capacity = i._middle_value.capacity ();
    b[n].size = &i._middle_size;
    b[n].is_null = &i._middle_null;
    n++;

    // _last
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._last_value.data ();
    b[n].capacity = i._last_value.capacity ();
    b[n].size = &i._last_size;
    b[n].is_null = &i._last_null;
    n++;

    // _full
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._full_value.data ();
    b[n].capacity = i._full_value.capacity ();
    b[n].size = &i._full_size;
    b[n].is_null = &i._full_null;
    n++;
  }

  bool access::composite_value_traits< ::kpk::data::Name, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // _first
    //
    {
      ::QString const& v =
        o._first;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._first_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._first_value,
        size,
        is_null,
        v);
      i._first_null = is_null;
      i._first_size = size;
      grew = grew || (cap != i._first_value.capacity ());
    }

    // _middle
    //
    {
      ::QString const& v =
        o._middle;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._middle_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._middle_value,
        size,
        is_null,
        v);
      i._middle_null = is_null;
      i._middle_size = size;
      grew = grew || (cap != i._middle_value.capacity ());
    }

    // _last
    //
    {
      ::QString const& v =
        o._last;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._last_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._last_value,
        size,
        is_null,
        v);
      i._last_null = is_null;
      i._last_size = size;
      grew = grew || (cap != i._last_value.capacity ());
    }

    // _full
    //
    {
      ::QString const& v =
        o._full;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i._full_value.capacity ());
      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_image (
        i._full_value,
        size,
        is_null,
        v);
      i._full_null = is_null;
      i._full_size = size;
      grew = grew || (cap != i._full_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::kpk::data::Name, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // _first
    //
    {
      ::QString& v =
        o._first;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._first_value,
        i._first_size,
        i._first_null);
    }

    // _middle
    //
    {
      ::QString& v =
        o._middle;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._middle_value,
        i._middle_size,
        i._middle_null);
    }

    // _last
    //
    {
      ::QString& v =
        o._last;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._last_value,
        i._last_size,
        i._last_null);
    }

    // _full
    //
    {
      ::QString& v =
        o._full;

      pgsql::value_traits<
          ::QString,
          pgsql::id_string >::set_value (
        v,
        i._full_value,
        i._full_size,
        i._full_null);
    }
  }
}

#include <odb/post.hxx>
