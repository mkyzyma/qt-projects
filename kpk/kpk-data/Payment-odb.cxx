// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Payment-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // Payment
  //

  const char alias_traits<  ::kpk::data::Bank,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::Payment, id_pgsql >::bank_tag>::
  table_name[] = "\"bank\"";

  bool access::object_traits_impl< ::kpk::data::Payment, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // DbObject base
    //
    if (object_traits_impl< ::kpk::data::DbObject, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    // MemberInfo base
    //
    if (object_traits_impl< ::kpk::data::MemberInfo, id_pgsql >::grow (
          i, t + 5UL))
      grew = true;

    // _date
    //
    t[7UL] = 0;

    // _payType
    //
    t[8UL] = 0;

    // _bank
    //
    t[9UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::kpk::data::Payment, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // DbObject base
    //
    object_traits_impl< ::kpk::data::DbObject, id_pgsql >::bind (b + n, i, sk);
    n += 5UL;

    // MemberInfo base
    //
    object_traits_impl< ::kpk::data::MemberInfo, id_pgsql >::bind (b + n, i, sk);
    n += 2UL;

    // _date
    //
    b[n].type = pgsql::bind::date;
    b[n].buffer = &i._date_value;
    b[n].is_null = &i._date_null;
    n++;

    // _payType
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._payType_value;
    b[n].is_null = &i._payType_null;
    n++;

    // _bank
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i._bank_value;
    b[n].is_null = &i._bank_null;
    n++;
  }

  bool access::object_traits_impl< ::kpk::data::Payment, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // DbObject base
    //
    if (object_traits_impl< ::kpk::data::DbObject, id_pgsql >::init (i, o, sk))
      grew = true;

    // MemberInfo base
    //
    if (object_traits_impl< ::kpk::data::MemberInfo, id_pgsql >::init (i, o, sk))
      grew = true;

    // _date
    //
    {
      ::QDate const& v =
        o.date ();

      bool is_null (true);
      pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::set_image (
        i._date_value, is_null, v);
      i._date_null = is_null;
    }

    // _payType
    //
    {
      ::kpk::data::PayType const& v =
        o.payType ();

      bool is_null (false);
      pgsql::value_traits<
          ::kpk::data::PayType,
          pgsql::id_integer >::set_image (
        i._payType_value, is_null, v);
      i._payType_null = is_null;
    }

    // _bank
    //
    {
      ::kpk::data::BankPtr const& v =
        o.bank ();

      typedef object_traits< ::kpk::data::Bank > obj_traits;
      typedef odb::pointer_traits< ::kpk::data::BankPtr > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i._bank_value, is_null, id);
        i._bank_null = is_null;
      }
      else
        i._bank_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::kpk::data::Payment, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // DbObject base
    //
    object_traits_impl< ::kpk::data::DbObject, id_pgsql >::init (o, i, db);

    // MemberInfo base
    //
    object_traits_impl< ::kpk::data::MemberInfo, id_pgsql >::init (o, i, db);

    // _date
    //
    {
      ::QDate v;

      pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::set_value (
        v,
        i._date_value,
        i._date_null);

      o.date (v);
    }

    // _payType
    //
    {
      ::kpk::data::PayType v;

      pgsql::value_traits<
          ::kpk::data::PayType,
          pgsql::id_integer >::set_value (
        v,
        i._payType_value,
        i._payType_null);

      o.payType (v);
    }

    // _bank
    //
    {
      ::kpk::data::BankPtr v;

      typedef object_traits< ::kpk::data::Bank > obj_traits;
      typedef odb::pointer_traits< ::kpk::data::BankPtr > ptr_traits;

      if (i._bank_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i._bank_value,
          i._bank_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }

      o.bank (v);
    }
  }
}

#include <odb/post.hxx>
