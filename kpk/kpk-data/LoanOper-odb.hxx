// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef LOAN_OPER_ODB_HXX
#define LOAN_OPER_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "LoanOper.h"

#include "IsDeleted-odb.hxx"
#include "Loan-odb.hxx"
#include "LoanOperValue-odb.hxx"
#include "LoanType-odb.hxx"
#include "Member-odb.hxx"
#include "Name-odb.hxx"
#include "Passport-odb.hxx"
#include "Person-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // LoanOper
  //
  template <>
  struct class_traits< ::kpk::data::LoanOper >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::kpk::data::LoanOper >
  {
    public:
    typedef ::kpk::data::LoanOper object_type;
    typedef ::std::shared_ptr< ::kpk::data::LoanOper > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::ulong id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // LoanOper
  //
  template <typename A>
  struct pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >:
    pointer_query_columns< ::kpk::data::IsDeleted, id_pgsql, A >
  {
    // IsDeleted
    //
    typedef pointer_query_columns< ::kpk::data::IsDeleted, id_pgsql, A > IsDeleted;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // plan
    //
    struct plan_class_
    {
      plan_class_ ()
      {
      }

      // date
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::query_type,
        pgsql::id_date >
      date_type_;

      static const date_type_ date;

      // amount
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      amount_type_;

      static const amount_type_ amount;

      // loan
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loan_type_;

      static const loan_type_ loan;

      // loanDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loanDept_type_;

      static const loanDept_type_ loanDept;

      // prc
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prc_type_;

      static const prc_type_ prc;

      // prcDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prcDept_type_;

      static const prcDept_type_ prcDept;

      // peni
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      peni_type_;

      static const peni_type_ peni;
    };

    static const plan_class_ plan;

    // fact
    //
    struct fact_class_
    {
      fact_class_ ()
      {
      }

      // date
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::query_type,
        pgsql::id_date >
      date_type_;

      static const date_type_ date;

      // amount
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      amount_type_;

      static const amount_type_ amount;

      // loan
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loan_type_;

      static const loan_type_ loan;

      // loanDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loanDept_type_;

      static const loanDept_type_ loanDept;

      // prc
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prc_type_;

      static const prc_type_ prc;

      // prcDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prcDept_type_;

      static const prcDept_type_ prcDept;

      // peni
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      peni_type_;

      static const peni_type_ peni;
    };

    static const fact_class_ fact;

    // person
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    person_type_;

    static const person_type_ person;

    // member
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    member_type_;

    static const member_type_ member;

    // loan
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    loan_type_;

    static const loan_type_ loan;
  };

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::id_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::date_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  date (A::table_name, "\"plan_date\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::amount_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  amount (A::table_name, "\"plan_amount\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::loan_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  loan (A::table_name, "\"plan_loan\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::loanDept_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  loanDept (A::table_name, "\"plan_loanDept\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::prc_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  prc (A::table_name, "\"plan_prc\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::prcDept_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  prcDept (A::table_name, "\"plan_prcDept\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::peni_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  peni (A::table_name, "\"plan_peni\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan;

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::date_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  date (A::table_name, "\"fact_date\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::amount_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  amount (A::table_name, "\"fact_amount\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::loan_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  loan (A::table_name, "\"fact_loan\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::loanDept_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  loanDept (A::table_name, "\"fact_loanDept\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::prc_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  prc (A::table_name, "\"fact_prc\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::prcDept_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  prcDept (A::table_name, "\"fact_prcDept\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::peni_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  peni (A::table_name, "\"fact_peni\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact;

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::person_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  person (A::table_name, "\"idPerson\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::member_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  member (A::table_name, "\"idMember\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::loan_type_
  pointer_query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  loan (A::table_name, "\"idLoan\"", 0);

  template <>
  class access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >:
    public access::object_traits< ::kpk::data::LoanOper >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type: object_traits_impl< ::kpk::data::IsDeleted, id_pgsql >::image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _plan
      //
      composite_value_traits< ::kpk::data::LoanOperValue, id_pgsql >::image_type _plan_value;

      // _fact
      //
      composite_value_traits< ::kpk::data::LoanOperValue, id_pgsql >::image_type _fact_value;

      // _person
      //
      long long _person_value;
      bool _person_null;

      // _member
      //
      long long _member_value;
      bool _member_null;

      // _loan
      //
      long long _loan_value;
      bool _loan_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct person_tag;
    struct member_tag;
    struct loan_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 20UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::kpk::data::LoanOper, id_common >:
    public access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >
  {
  };

  // LoanOper
  //
  template <>
  struct alias_traits<
    ::kpk::data::Person,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::person_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::kpk::data::Member,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::member_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::kpk::data::Loan,
    id_pgsql,
    access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::loan_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::kpk::data::LoanOper, id_pgsql >
  {
    // person
    //
    typedef
    odb::alias_traits<
      ::kpk::data::Person,
      id_pgsql,
      access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::person_tag>
    person_alias_;

    // member
    //
    typedef
    odb::alias_traits<
      ::kpk::data::Member,
      id_pgsql,
      access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::member_tag>
    member_alias_;

    // loan
    //
    typedef
    odb::alias_traits<
      ::kpk::data::Loan,
      id_pgsql,
      access::object_traits_impl< ::kpk::data::LoanOper, id_pgsql >::loan_tag>
    loan_alias_;
  };

  template <typename A>
  struct query_columns< ::kpk::data::LoanOper, id_pgsql, A >:
    query_columns_base< ::kpk::data::LoanOper, id_pgsql >,
    query_columns< ::kpk::data::IsDeleted, id_pgsql, A >
  {
    // IsDeleted
    //
    typedef query_columns< ::kpk::data::IsDeleted, id_pgsql, A > IsDeleted;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // plan
    //
    struct plan_class_
    {
      plan_class_ ()
      {
      }

      // date
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::query_type,
        pgsql::id_date >
      date_type_;

      static const date_type_ date;

      // amount
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      amount_type_;

      static const amount_type_ amount;

      // loan
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loan_type_;

      static const loan_type_ loan;

      // loanDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loanDept_type_;

      static const loanDept_type_ loanDept;

      // prc
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prc_type_;

      static const prc_type_ prc;

      // prcDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prcDept_type_;

      static const prcDept_type_ prcDept;

      // peni
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      peni_type_;

      static const peni_type_ peni;
    };

    static const plan_class_ plan;

    // fact
    //
    struct fact_class_
    {
      fact_class_ ()
      {
      }

      // date
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::QDate,
          pgsql::id_date >::query_type,
        pgsql::id_date >
      date_type_;

      static const date_type_ date;

      // amount
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      amount_type_;

      static const amount_type_ amount;

      // loan
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loan_type_;

      static const loan_type_ loan;

      // loanDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      loanDept_type_;

      static const loanDept_type_ loanDept;

      // prc
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prc_type_;

      static const prc_type_ prc;

      // prcDept
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      prcDept_type_;

      static const prcDept_type_ prcDept;

      // peni
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          long int,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      peni_type_;

      static const peni_type_ peni;
    };

    static const fact_class_ fact;

    // person
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    person_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::kpk::data::Person,
        id_pgsql,
        person_alias_ > >
    person_pointer_type_;

    struct person_type_: person_pointer_type_, person_column_type_
    {
      person_type_ (const char* t, const char* c, const char* conv)
        : person_column_type_ (t, c, conv)
      {
      }
    };

    static const person_type_ person;

    // member
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    member_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::kpk::data::Member,
        id_pgsql,
        member_alias_ > >
    member_pointer_type_;

    struct member_type_: member_pointer_type_, member_column_type_
    {
      member_type_ (const char* t, const char* c, const char* conv)
        : member_column_type_ (t, c, conv)
      {
      }
    };

    static const member_type_ member;

    // loan
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    loan_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::kpk::data::Loan,
        id_pgsql,
        loan_alias_ > >
    loan_pointer_type_;

    struct loan_type_: loan_pointer_type_, loan_column_type_
    {
      loan_type_ (const char* t, const char* c, const char* conv)
        : loan_column_type_ (t, c, conv)
      {
      }
    };

    static const loan_type_ loan;
  };

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::id_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::date_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  date (A::table_name, "\"plan_date\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::amount_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  amount (A::table_name, "\"plan_amount\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::loan_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  loan (A::table_name, "\"plan_loan\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::loanDept_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  loanDept (A::table_name, "\"plan_loanDept\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::prc_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  prc (A::table_name, "\"plan_prc\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::prcDept_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  prcDept (A::table_name, "\"plan_prcDept\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::peni_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_::
  peni (A::table_name, "\"plan_peni\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan_class_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::plan;

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::date_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  date (A::table_name, "\"fact_date\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::amount_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  amount (A::table_name, "\"fact_amount\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::loan_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  loan (A::table_name, "\"fact_loan\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::loanDept_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  loanDept (A::table_name, "\"fact_loanDept\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::prc_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  prc (A::table_name, "\"fact_prc\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::prcDept_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  prcDept (A::table_name, "\"fact_prcDept\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::peni_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_::
  peni (A::table_name, "\"fact_peni\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact_class_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::fact;

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::person_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  person (A::table_name, "\"idPerson\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::member_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  member (A::table_name, "\"idMember\"", 0);

  template <typename A>
  const typename query_columns< ::kpk::data::LoanOper, id_pgsql, A >::loan_type_
  query_columns< ::kpk::data::LoanOper, id_pgsql, A >::
  loan (A::table_name, "\"idLoan\"", 0);
}

#include "LoanOper-odb.ixx"

#include <odb/post.hxx>

#endif // LOAN_OPER_ODB_HXX
